// Simple PDF and download service without complex imports

export const downloadImageAsPNG = async (design) => {
  try {
    // Check for image URL in different possible properties
    const imageUrl = design.imageUrl || (design.images && design.images[0] && design.images[0].url);

    if (!imageUrl) {
      throw new Error('No image available for download');
    }

    const filename = `${design.title || 'StyleGen_Design'}_${Date.now()}.png`;
    
    // Create download link
    const link = document.createElement('a');
    link.href = imageUrl;
    link.download = filename;
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    return { success: true, filename };
  } catch (error) {
    console.error('Image download failed:', error);
    throw new Error(`Failed to download image: ${error.message}`);
  }
};

export const downloadDesignAsJSON = (design) => {
  try {
    const designData = {
      ...design,
      exportedAt: new Date().toISOString(),
      exportVersion: '1.0'
    };
    
    const dataStr = JSON.stringify(designData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `${design.title || 'StyleGen_Design'}_data_${Date.now()}.json`;
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    setTimeout(() => URL.revokeObjectURL(url), 100);
    
    return { success: true, filename: link.download };
  } catch (error) {
    console.error('JSON export failed:', error);
    throw new Error(`Failed to export JSON: ${error.message}`);
  }
};

// Simple PDF download function
export const downloadDesignAsPDF = async (design, type = 'design') => {
  try {
    // For now, create a simple text-based PDF alternative
    const content = `
StyleGen AI - Fashion Design Report
==================================

Design: ${design.title || 'Untitled Design'}
Generated: ${new Date().toLocaleDateString()}

Design Parameters:
- Gender: ${design.preferences?.gender || design.gender || 'Not specified'}
- Occasion: ${design.preferences?.occasion || design.occasion || 'Not specified'}
- Style: ${design.preferences?.style || design.style || 'Not specified'}
- Colors: ${design.preferences?.colors ? design.preferences.colors.join(', ') : (design.colors ? design.colors.join(', ') : 'Not specified')}
- Pattern: ${design.preferences?.pattern || design.pattern || 'Not specified'}
- Material: ${design.preferences?.material || design.material || 'Not specified'}
- Mood: ${design.preferences?.mood || design.mood || 'Not specified'}
- Season: ${design.preferences?.season || design.season || 'Not specified'}

${type === 'tech-pack' ? `
Technical Specifications:
- Fabric Composition: To be determined based on material selection
- Care Instructions: Follow standard care guidelines for selected materials
- Sizing: Standard sizing chart applicable
- Construction: Professional garment construction required
- Quality Standards: High-quality finishing expected
- Color Matching: Pantone color matching recommended
- Packaging: Standard retail packaging
` : ''}

Generated by StyleGen AI
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `${design.title || 'StyleGen_Design'}_${type}_${Date.now()}.txt`;
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    setTimeout(() => URL.revokeObjectURL(url), 100);
    
    return { success: true, filename: link.download };
  } catch (error) {
    console.error('PDF generation failed:', error);
    throw new Error(`Failed to generate PDF: ${error.message}`);
  }
};
